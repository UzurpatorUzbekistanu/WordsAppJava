buildscript {
	ext {
		lombokVersion = '1.18.22'
		springBootVersion = '3.3.2'
		springDependencyManagementVersion = '1.1.6'
		liquidBaseVersion = '4.27.0'
		snakeyamlVersion = '2.0'
		thymeleafVersion = '3.2.2'
		jakartaValidationApi = '3.0.2'
		hibernateValidator = '8.0.0.Final'
		springSecurity = '6.3.3'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
	id 'jacoco'
}

jacoco {
	toolVersion = "0.8.12"
}

group = 'com.example'
version = ''

java {
	toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

configurations {
	compileOnly { extendsFrom annotationProcessor }
}

repositories { mavenCentral() }

dependencies {
	// --- Spring
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.postgresql:postgresql'
	implementation "org.liquibase:liquibase-core:${liquidBaseVersion}"

	// --- Walidacja
	implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationApi}"
	implementation "org.hibernate.validator:hibernate-validator:${hibernateValidator}"

	// --- Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// --- JJWT (spójnie 0.12.5)
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly  'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly  'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// --- Testy: JUnit 5 + Mockito + AssertJ (starter już to zawiera)
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		// wyłącz vintage/JUnit4
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testImplementation 'org.mockito:mockito-core:5.14.2'
	testImplementation 'org.assertj:assertj-core:3.26.3'

	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
	// ( wykluczenia z pokrycia:
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// konfiguracja/infrastruktura
					'**/config/**',
					'**/*Application*',
					'**/*Config*',
					'**/*Exception*',
					// DTO/record/enums/mapper "głupie nośniki"
					'**/*Dto*', '**/*Request*', '**/*Response*',
					'**/*Record*', '**/*Mapper*',
					// JPA/bezlogiczne encje
					'**/domain/*Entity*', '**/domain/*$*',
					// generowane i Lombok
					'**/*$*$*', '**/*Builder*'
			])
		}))
	}
}

// reguły jakości — build FAIL poniżej progu
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60 // np. 60%
			}
		}

	}
}

check.dependsOn jacocoTestCoverageVerification